<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>教師 Persona 產生器</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .container {
            max-width: 900px;
            margin: auto;
            padding: 2rem;
        }
        .card {
            background-color: #fff;
            padding: 2rem;
            border-radius: 1.5rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        }
        .form-input {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid #d1d5db;
            border-radius: 0.75rem;
            transition: all 0.2s;
        }
        .form-input:focus {
            border-color: #6366f1;
            outline: none;
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
        }
        .btn-primary {
            background-color: #4f46e5;
            color: #fff;
            padding: 0.75rem 2rem;
            border-radius: 0.75rem;
            transition: background-color 0.2s;
        }
        .btn-primary:hover {
            background-color: #4338ca;
        }
        .loading-spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #fff;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .btn-secondary {
            background-color: #e5e7eb;
            color: #4b5563;
            padding: 0.75rem 2rem;
            border-radius: 0.75rem;
            transition: background-color 0.2s;
        }
        .btn-secondary:hover {
            background-color: #d1d5db;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center p-4">
    <div class="container">
        <div class="card space-y-8">
            <div class="text-center">
                <h1 class="text-3xl font-bold text-gray-800">教師 Persona 產生器</h1>
                <p class="mt-2 text-gray-600">填寫以下資訊，由 Gemini 協助您生成目標教師的 Persona 檔案。</p>
            </div>

            <div id="input-section" class="space-y-6">
                <div>
                    <label for="common-issue" class="block text-sm font-medium text-gray-700 mb-2">常見議題</label>
                    <input type="text" id="common-issue" class="form-input" placeholder="例如：AI 融入教學、SEL、PBL">
                </div>
                
                <div>
                    <label for="teaching-experience" class="block text-sm font-medium text-gray-700 mb-2">教學年資</label>
                    <select id="teaching-experience" class="form-input">
                        <option value="">請選擇</option>
                        <option value="0-3年">0-3年</option>
                        <option value="3-10年">3-10年</option>
                        <option value="10-20年">10-20年</option>
                        <option value="20年以上">20年以上</option>
                    </select>
                </div>

                <div>
                    <label for="teaching-grade" class="block text-sm font-medium text-gray-700 mb-2">教學年段</label>
                    <select id="teaching-grade" class="form-input">
                        <option value="">請選擇</option>
                        <option value="國小低年級">國小低年級</option>
                        <option value="國小中年級">國小中年級</option>
                        <option value="國小高年級">國小高年級</option>
                        <option value="國中">國中</option>
                    </select>
                </div>

                <div>
                    <label for="persona-outline" class="block text-sm font-medium text-gray-700 mb-2">Persona 核心輪廓</label>
                    <textarea id="persona-outline" rows="3" class="form-input" placeholder="用一段文字講述她的教學背景、理念與遇到的困境"></textarea>
                </div>

                <div class="mt-8">
                    <label for="api-key-input" class="block text-sm font-medium text-gray-700 mb-2">輸入你的 Google API 金鑰</label>
                    <input type="text" id="api-key-input" class="form-input" placeholder="此為必填欄位">
                </div>

                <div class="flex justify-end">
                    <button id="generate-btn" class="btn-primary flex items-center">
                        <span id="btn-text">生成 Persona</span>
                        <div id="btn-spinner" class="loading-spinner hidden ml-2"></div>
                    </button>
                </div>
            </div>

            <div id="output-section" class="hidden">
                <div class="space-y-8">
                    <!-- Persona Story and Traits -->
                    <div>
                        <h2 class="text-xl font-bold text-gray-800 mb-4">第一區塊：Persona 故事與特質</h2>
                        <div class="card p-6 space-y-4">
                            <div>
                                <h3 class="font-semibold text-gray-700">Persona 名稱</h3>
                                <p id="persona-name" class="mt-1 text-gray-900"></p>
                            </div>
                            <div>
                                <h3 class="font-semibold text-gray-700">故事簡介</h3>
                                <p id="persona-story" class="mt-1 text-gray-900"></p>
                            </div>
                            <div>
                                <h3 class="font-semibold text-gray-700">目標 (Goals)</h3>
                                <ul id="persona-goals" class="mt-1 list-disc list-inside text-gray-900 space-y-1"></ul>
                            </div>
                            <div>
                                <h3 class="font-semibold text-gray-700">擔憂 (Concerns)</h3>
                                <ul id="persona-concerns" class="mt-1 list-disc list-inside text-gray-900 space-y-1"></ul>
                            </div>
                            <div>
                                <h3 class="font-semibold text-gray-700">偏好 (Preferred Formats)</h3>
                                <ul id="persona-formats" class="mt-1 list-disc list-inside text-gray-900 space-y-1"></ul>
                            </div>
                        </div>
                    </div>

                    <!-- Pain Points Analysis -->
                    <div>
                        <h2 class="text-xl font-bold text-gray-800 mb-4">第二區塊：具體痛點分析</h2>
                        <div class="card p-6">
                            <ul id="pain-points" class="list-decimal list-inside text-gray-900 space-y-2"></ul>
                        </div>
                    </div>

                    <!-- Content Ideas and Strategy -->
                    <div>
                        <h2 class="text-xl font-bold text-gray-800 mb-4">第三區塊：內容發想與策略建議</h2>
                        <div class="card p-6 space-y-4">
                            <div>
                                <h3 class="font-semibold text-gray-700">文章主題</h3>
                                <ul id="article-ideas" class="mt-1 list-disc list-inside text-gray-900 space-y-1"></ul>
                            </div>
                            <div>
                                <h3 class="font-semibold text-gray-700">Podcast 議題</h3>
                                <ul id="podcast-ideas" class="mt-1 list-disc list-inside text-gray-900 space-y-1"></ul>
                            </div>
                            <div>
                                <h3 class="font-semibold text-gray-700">線上課程方向</h3>
                                <ul id="course-ideas" class="mt-1 list-disc list-inside text-gray-900 space-y-1"></ul>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-8 flex justify-end space-x-4">
                    <button id="copy-btn" class="btn-secondary">複製內容</button>
                    <button id="new-persona-btn" class="btn-primary">生成新 Persona</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const generateBtn = document.getElementById('generate-btn');
            const btnText = document.getElementById('btn-text');
            const btnSpinner = document.getElementById('btn-spinner');
            const copyBtn = document.getElementById('copy-btn');
            const newPersonaBtn = document.getElementById('new-persona-btn');

            const commonIssueInput = document.getElementById('common-issue');
            const teachingExperienceInput = document.getElementById('teaching-experience');
            const teachingGradeInput = document.getElementById('teaching-grade');
            const personaOutlineInput = document.getElementById('persona-outline');
            const apiKeyInput = document.getElementById('api-key-input');
            const inputSection = document.getElementById('input-section');
            const outputSection = document.getElementById('output-section');

            const personaNameEl = document.getElementById('persona-name');
            const personaStoryEl = document.getElementById('persona-story');
            const personaGoalsEl = document.getElementById('persona-goals');
            const personaConcernsEl = document.getElementById('persona-concerns');
            const personaFormatsEl = document.getElementById('persona-formats');
            const painPointsEl = document.getElementById('pain-points');
            const articleIdeasEl = document.getElementById('article-ideas');
            const podcastIdeasEl = document.getElementById('podcast-ideas');
            const courseIdeasEl = document.getElementById('course-ideas');
            
            // Reusable function to show an alert
            function showCustomAlert(message) {
                const existingAlert = document.getElementById('custom-alert');
                if (existingAlert) {
                    existingAlert.remove();
                }

                const alertDiv = document.createElement('div');
                alertDiv.id = 'custom-alert';
                alertDiv.className = 'fixed top-4 right-4 bg-gray-800 text-white px-6 py-3 rounded-lg shadow-xl transition-all duration-300 transform translate-x-full opacity-0';
                alertDiv.textContent = message;
                document.body.appendChild(alertDiv);

                // Show the alert with a slide-in animation
                setTimeout(() => {
                    alertDiv.classList.remove('translate-x-full', 'opacity-0');
                    alertDiv.classList.add('translate-x-0', 'opacity-100');
                }, 100);

                // Hide the alert after 3 seconds
                setTimeout(() => {
                    alertDiv.classList.remove('translate-x-0', 'opacity-100');
                    alertDiv.classList.add('translate-x-full', 'opacity-0');
                    setTimeout(() => alertDiv.remove(), 500);
                }, 3000);
            }

            generateBtn.addEventListener('click', async () => {
                const commonIssue = commonIssueInput.value;
                const teachingExperience = teachingExperienceInput.value;
                const teachingGrade = teachingGradeInput.value;
                const personaOutline = personaOutlineInput.value;
                const userApiKey = apiKeyInput.value.trim();

                if (!commonIssue || !teachingExperience || !teachingGrade || !personaOutline || !userApiKey) {
                    showCustomAlert('請填寫所有欄位，包含 Google API 金鑰');
                    return;
                }

                // Show loading state
                btnText.textContent = '生成中...';
                btnSpinner.classList.remove('hidden');
                generateBtn.disabled = true;

                try {
                    const prompt = `
                    請為我建立一個詳細的教師 Persona，根據以下資訊，並以 JSON 格式輸出：

                    主題：${commonIssue}
                    教學年資：${teachingExperience}
                    教學年段：${teaching-grade}
                    Persona 輪廓：${personaOutline}

                    請根據這些資訊，建立包含以下三部分的 Persona：

                    第一區塊：Persona 故事與特質
                    * persona_name: 給這個人物一個具體的稱呼。
                    * story: 用一段文字講述她的教學背景、理念與遇到的困境。
                    * goals: 列出她想在教學上實現的具體目標 (請以陣列形式列出)。
                    * concerns: 分析她內心深處的焦慮與顧慮 (請以陣列形式列出)。
                    * preferred_formats: 指出她習慣從哪種媒介獲取資訊 (請以陣列形式列出)。

                    第二區塊：具體痛點分析
                    * pain_points: 列出她最可能遇到的 10 個具體、可解決的痛點 (請以陣列形式列出)。

                    第三區塊：內容發想與策略建議
                    * article_ideas: 建議可以撰寫的文章標題 (請以陣列形式列出)。
                    * podcast_ideas: 提供適合 Podcast 討論的議題 (請以陣列形式列出)。
                    * course_ideas: 建議可以設計的線上課程方向 (請以陣列形式列出)。
                    `;

                    // Gemini API call logic
                    const payload = {
                        contents: [{ parts: [{ text: prompt }] }],
                        generationConfig: {
                            responseMimeType: "application/json",
                            responseSchema: {
                                type: "OBJECT",
                                properties: {
                                    "persona": {
                                        type: "OBJECT",
                                        properties: {
                                            "persona_name": { "type": "STRING" },
                                            "story": { "type": "STRING" },
                                            "goals": { "type": "ARRAY", "items": { "type": "STRING" } },
                                            "concerns": { "type": "ARRAY", "items": { "type": "STRING" } },
                                            "preferred_formats": { "type": "ARRAY", "items": { "type": "STRING" } }
                                        }
                                    },
                                    "pain_points": { "type": "ARRAY", "items": { "type": "STRING" } },
                                    "content_ideas": {
                                        type: "OBJECT",
                                        properties: {
                                            "article_ideas": { "type": "ARRAY", "items": { "type": "STRING" } },
                                            "podcast_ideas": { "type": "ARRAY", "items": { "type": "STRING" } },
                                            "course_ideas": { "type": "ARRAY", "items": { "type": "STRING" } }
                                        }
                                    }
                                }
                            }
                        }
                    };

                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${userApiKey}`;

                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error('API Error:', errorText);
                        showCustomAlert('生成失敗，請檢查金鑰或稍後再試。');
                        return;
                    }

                    const result = await response.json();
                    const jsonString = result.candidates[0].content.parts[0].text;
                    const parsedData = JSON.parse(jsonString);

                    // Render the persona data
                    renderPersona(parsedData);

                    // Show output section
                    inputSection.classList.add('hidden');
                    outputSection.classList.remove('hidden');

                } catch (error) {
                    console.error('Error:', error);
                    showCustomAlert('發生錯誤，請檢查輸入或稍後再試。');
                } finally {
                    // Reset loading state
                    btnText.textContent = '生成 Persona';
                    btnSpinner.classList.add('hidden');
                    generateBtn.disabled = false;
                }
            });

            // "複製內容" button functionality
            copyBtn.addEventListener('click', () => {
                const personaContent = document.getElementById('output-section').innerText;
                const textarea = document.createElement('textarea');
                textarea.value = personaContent;
                document.body.appendChild(textarea);
                textarea.select();
                document.execCommand('copy');
                document.body.removeChild(textarea);

                showCustomAlert('Persona 內容已複製！');
            });

            // "生成新 Persona" button functionality
            newPersonaBtn.addEventListener('click', () => {
                outputSection.classList.add('hidden');
                inputSection.classList.remove('hidden');
                // Optionally clear input fields for a new persona
                commonIssueInput.value = '';
                teachingExperienceInput.value = '';
                teachingGradeInput.value = '';
                personaOutlineInput.value = '';
            });

            function renderPersona(data) {
                const persona = data.persona;
                const painPoints = data.pain_points;
                const contentIdeas = data.content_ideas;

                // Render Persona Section
                personaNameEl.textContent = persona.persona_name;
                personaStoryEl.textContent = persona.story;

                personaGoalsEl.innerHTML = persona.goals.map(goal => `<li>${goal}</li>`).join('');
                personaConcernsEl.innerHTML = persona.concerns.map(concern => `<li>${concern}</li>`).join('');
                personaFormatsEl.innerHTML = persona.preferred_formats.map(format => `<li>${format}</li>`).join('');

                // Render Pain Points Section
                painPointsEl.innerHTML = painPoints.map(point => `<li>${point}</li>`).join('');

                // Render Content Ideas Section
                articleIdeasEl.innerHTML = contentIdeas.article_ideas.map(idea => `<li>${idea}</li>`).join('');
                podcastIdeasEl.innerHTML = contentIdeas.podcast_ideas.map(idea => `<li>${idea}</li>`).join('');
                courseIdeasEl.innerHTML = contentIdeas.course_ideas.map(idea => `<li>${idea}</li>`).join('');
            }
        });
    </script>
</body>
</html>
